use RFM

UPDATE SUPERSTORE SET ORDER_DATE = REPLACE(ORDER_DATE, '/', '-'),
				      SHIP_DATE = REPLACE(SHIP_DATE, '/', '-');

SELECT * FROM SUPERSTORE;

SELECT MAX(STR_TO_DATE(ORDER_DATE, '%m-%d-%Y')) FROM SUPERSTORE;

DROP VIEW IF EXISTS COMBINED_ORDERS, CUSTOMER_GROUPING;

CREATE VIEW CUSTOMER_GROUPING AS 
SELECT
*,
CASE 
	WHEN (R>=4 AND R<=5) AND (((F+M)/2) >= 4 AND ((F+M)/2) <= 5) THEN 'Champions'
	WHEN (R>=2 AND R<=5) AND (((F+M)/2) >= 3 AND ((F+M)/2) <= 5) THEN 'Loyal Customers'
    WHEN (R>=3 AND R<=5) AND (((F+M)/2) >= 1 AND ((F+M)/2) <=3) THEN 'Potential Loyalist'
    WHEN (R>=4 AND R<=5) AND (((F+M)/2) >= 0 AND ((F+M)/2) <=1) THEN 'New Customers'
    WHEN (R>=3 AND R<=4) AND (((F+M)/2) >= 0 AND ((F+M)/2) <=1) THEN 'Promising'
    WHEN (R>=2 AND R<=3) AND (((F+M)/2) >= 2 AND ((F+M)/2) <=3) THEN 'Customers Needing Attention'
    WHEN (R>=2 AND R<=3) AND (((F+M)/2) >= 0 AND ((F+M)/2) <=2) THEN 'About to Sleep'
    WHEN (R>=0 AND R<=2) AND (((F+M)/2) >= 2 AND ((F+M)/2) <=5) THEN 'At Risk'
    WHEN (R>=0 AND R<=1) AND (((F+M)/2) >= 4 AND ((F+M)/2) <=5) THEN "Can't Lose Them"
    WHEN (R>=1 AND R<=2) AND (((F+M)/2) >= 1 AND ((F+M)/2) <=2) THEN 'Hibernating'
    WHEN (R>=0 AND R<=2) AND (((F+M)/2) >= 0 AND ((F+M)/2) <=2) THEN 'Lost'
END AS CUSTOMER_SEGMENT
FROM (
 SELECT 
	MAX(STR_TO_DATE(ORDER_DATE, '%m-%d-%Y')) AS LATEST_ORDER_DATE,
	CUSTOMER_ID, 
	AVG(DISCOUNT) AS GROUP_DISCOUNT,
	DATEDIFF(STR_TO_DATE('2018-01-01', '%Y-%m-%d'), MAX(STR_TO_DATE(ORDER_DATE, '%m-%d-%Y'))) AS RECENCY,
	COUNT(DISTINCT ORDER_ID) AS FREQUENCY,
	ROUND(SUM(SALES), 2) AS MONETARY,
	NTILE(5) OVER (ORDER BY DATEDIFF(STR_TO_DATE('2018-01-01', '%Y-%m-%d'), MAX(STR_TO_DATE(ORDER_DATE, '%m-%d-%Y'))) DESC) AS R,
	NTILE(5) OVER (ORDER BY COUNT(DISTINCT ORDER_ID) ASC) AS F,
	NTILE(5) OVER (ORDER BY ROUND(SUM(SALES), 2) ASC) AS M 
 FROM SUPERSTORE
 GROUP BY CUSTOMER_ID
 ) RFM_TABLE
GROUP BY CUSTOMER_ID

-- Loyal Customer 매출액 기여가 1등이니 할인율을 ...
SELECT 
	CUSTOMER_SEGMENT,
	ROUND(COUNT(DISTINCT CUSTOMER_ID) / (SELECT COUNT(*) FROM CUSTOMER_GROUPING) * 100, 2) AS COUNT_PERCENTILE,
	ROUND(SUM(MONETARY) / (SELECT SUM(MONETARY) FROM CUSTOMER_GROUPING) * 100, 2) AS SALES_PERCENTILE,
	ROUND(AVG(GROUP_DISCOUNT), 2) AS AVG_GROUP_DISCOUNT
FROM customer_grouping 
GROUP BY CUSTOMER_SEGMENT
ORDER BY 3 DESC;


-- MVP IN SALES
SELECT CUSTOMER_NAME AS MVP, TOTAL_SALES
FROM (
 SELECT CUSTOMER_NAME, ROUND(SUM(SALES)) AS TOTAL_SALES
 FROM SUPERSTORE 
 GROUP BY CUSTOMER_NAME
 ORDER BY TOTAL_SALES DESC
) A
LIMIT 1

-- MVP IN PROFIT
SELECT CUSTOMER_NAME AS MVP, TOTAL_PROFIT
FROM (
 SELECT CUSTOMER_NAME, SEGMENT, ROUND(SUM(PROFIT)) AS TOTAL_PROFIT
 FROM SUPERSTORE 
 GROUP BY CUSTOMER_NAME, SEGMENT
 ORDER BY TOTAL_PROFIT DESC
) A
LIMIT 1

-- LOYAL CUSTOMER 그룹의 사람들 중에 어떤 segment 가 가장 많을까? 
-- CONSUMER :소비자 - 개인 
-- CORPORATE :기업 
-- HOME OFFICE : 재택근무자 
WITH LOYALS AS (
	SELECT 
	SEGMENT, COUNT(DISTINCT CUSTOMER_ID) CUST_NUM 
	FROM 
	SUPERSTORE
	WHERE CUSTOMER_ID IN (
	 SELECT CUSTOMER_ID
	 FROM customer_grouping
	 WHERE CUSTOMER_SEGMENT = 'Loyal Customers'
	)
	GROUP BY SEGMENT
)
SELECT SEGMENT, ROUND(CUST_NUM / (SELECT SUM(CUST_NUM) FROM LOYALS) * 100, 2) AS PERCENTILE
FROM LOYALS
GROUP BY SEGMENT;

-- 어느 지역, 어느 나라에 있는가? 어느 카테고리를 가장 많이 구매 했는가?
WITH LOYALS AS (
	SELECT 
	COUNTRY, COUNT(DISTINCT CUSTOMER_ID) CUST_NUM 
	FROM 
	SUPERSTORE
	WHERE CUSTOMER_ID IN (
	 SELECT CUSTOMER_ID
	 FROM customer_grouping
	 WHERE CUSTOMER_SEGMENT = 'Loyal Customers'
	)
	GROUP BY COUNTRY
)
SELECT COUNTRY, ROUND(CUST_NUM / (SELECT SUM(CUST_NUM) FROM LOYALS) * 100, 2) AS PERCENTILE
FROM LOYALS
GROUP BY COUNTRY;

WITH LOYALS AS (
	SELECT 
	REGION, COUNT(DISTINCT CUSTOMER_ID) CUST_NUM 
	FROM 
	SUPERSTORE
	WHERE CUSTOMER_ID IN (
	 SELECT CUSTOMER_ID
	 FROM customer_grouping
	 WHERE CUSTOMER_SEGMENT = 'Loyal Customers'
	)
	GROUP BY REGION
)
SELECT REGION, ROUND(CUST_NUM / (SELECT SUM(CUST_NUM) FROM LOYALS) * 100, 2) AS PERCENTILE
FROM LOYALS
GROUP BY REGION;

WITH LOYALS AS (
	SELECT 
	CATEGORY, COUNT(DISTINCT CUSTOMER_ID) CUST_NUM 
	FROM 
	SUPERSTORE
	WHERE CUSTOMER_ID IN (
	 SELECT CUSTOMER_ID
	 FROM customer_grouping
	 WHERE CUSTOMER_SEGMENT = 'Loyal Customers'
	)
	GROUP BY CATEGORY
)
SELECT CATEGORY, ROUND(CUST_NUM / (SELECT SUM(CUST_NUM) FROM LOYALS) * 100, 2) AS PERCENTILE
FROM LOYALS
GROUP BY CATEGORY
ORDER BY PERCENTILE DESC;

-- LOYAL CUSTOMER 그룹의 사람들은 어느 달에 가장 많이 구매할까?
-- 2014
WITH RECURSIVE CTE AS 
(
 SELECT 1 AS NUM
 UNION ALL
 SELECT NUM + 1
 FROM CTE 
 WHERE NUM < 12
),
PERIODS AS 
(
 SELECT DISTINCT ORDER_ID, STR_TO_DATE(ORDER_DATE, '%m-%d-%Y') ORDER_DATE
 FROM SUPERSTORE
 WHERE CUSTOMER_ID IN (
 	SELECT CUSTOMER_ID
	FROM customer_grouping
	WHERE CUSTOMER_SEGMENT = 'Loyal Customers')
)
SELECT CTE.NUM AS MONTH, COALESCE(O.NUM_OF_ORDERS, 0) AS NUM_OF_ORDERS
FROM CTE
LEFT JOIN (SELECT MONTH(ORDER_DATE) ORDER_MONTH, COUNT(*) NUM_OF_ORDERS
		   FROM PERIODS
		   WHERE YEAR(ORDER_DATE) = '2014'
		   GROUP BY 1
		   ORDER BY 1) O 
ON CTE.NUM = O.ORDER_MONTH;

-- 2015
WITH RECURSIVE CTE AS 
(
 SELECT 1 AS NUM
 UNION ALL
 SELECT NUM + 1
 FROM CTE 
 WHERE NUM < 12
),
PERIODS AS 
(
 SELECT DISTINCT ORDER_ID, STR_TO_DATE(ORDER_DATE, '%m-%d-%Y') ORDER_DATE
 FROM SUPERSTORE
 WHERE CUSTOMER_ID IN (
 	SELECT CUSTOMER_ID
	FROM customer_grouping
	WHERE CUSTOMER_SEGMENT = 'Loyal Customers')
)
SELECT CTE.NUM AS MONTH, COALESCE(O.NUM_OF_ORDERS, 0) AS NUM_OF_ORDERS
FROM CTE
LEFT JOIN (SELECT MONTH(ORDER_DATE) ORDER_MONTH, COUNT(*) NUM_OF_ORDERS
		   FROM PERIODS
		   WHERE YEAR(ORDER_DATE) = '2015'
		   GROUP BY 1
		   ORDER BY 1) O 
ON CTE.NUM = O.ORDER_MONTH;

-- 2016
WITH RECURSIVE CTE AS 
(
 SELECT 1 AS NUM
 UNION ALL
 SELECT NUM + 1
 FROM CTE 
 WHERE NUM < 12
),
PERIODS AS 
(
 SELECT DISTINCT ORDER_ID, STR_TO_DATE(ORDER_DATE, '%m-%d-%Y') ORDER_DATE
 FROM SUPERSTORE
 WHERE CUSTOMER_ID IN (
 	SELECT CUSTOMER_ID
	FROM customer_grouping
	WHERE CUSTOMER_SEGMENT = 'Loyal Customers')
)
SELECT CTE.NUM AS MONTH, COALESCE(O.NUM_OF_ORDERS, 0) AS NUM_OF_ORDERS
FROM CTE
LEFT JOIN (SELECT MONTH(ORDER_DATE) ORDER_MONTH, COUNT(*) NUM_OF_ORDERS
		   FROM PERIODS
		   WHERE YEAR(ORDER_DATE) = '2016'
		   GROUP BY 1
		   ORDER BY 1) O 
ON CTE.NUM = O.ORDER_MONTH;

-- 2017
WITH RECURSIVE CTE AS 
(
 SELECT 1 AS NUM
 UNION ALL
 SELECT NUM + 1
 FROM CTE 
 WHERE NUM < 12
),
PERIODS AS 
(
 SELECT DISTINCT ORDER_ID, STR_TO_DATE(ORDER_DATE, '%m-%d-%Y') ORDER_DATE
 FROM SUPERSTORE
 WHERE CUSTOMER_ID IN (
 	SELECT CUSTOMER_ID
	FROM customer_grouping
	WHERE CUSTOMER_SEGMENT = 'Loyal Customers')
)
SELECT CTE.NUM AS MONTH, COALESCE(O.NUM_OF_ORDERS, 0) AS NUM_OF_ORDERS
FROM CTE
LEFT JOIN (SELECT MONTH(ORDER_DATE) ORDER_MONTH, COUNT(*) NUM_OF_ORDERS
		   FROM PERIODS
		   WHERE YEAR(ORDER_DATE) = '2017'
		   GROUP BY 1
		   ORDER BY 1) O 
ON CTE.NUM = O.ORDER_MONTH;
